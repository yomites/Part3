{"version":3,"sources":["components/Person.js","components/Persons.js","components/AddPersonForm.js","components/SearchNameForm.js","services/persons.js","components/Notification.js","components/SuccessNotification.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","deleteButton","name","number","onClick","id","Persons","persons","nameSearch","nameToShow","map","key","AddPersonForm","addPerson","newName","handleNameChange","mobileNumber","handleMobileNumberChange","onSubmit","type","value","placeholder","onChange","style","backgroundColor","SearchNameForm","handleNameSearchChange","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","className","SuccessNotification","App","useState","setPersons","setNewName","setMobileNumber","setNameSearch","setNameToShow","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personService","initialPersons","catch","error","setTimeout","console","log","length","event","evt","personsCopy","target","filter","element","toUpperCase","includes","preventDefault","personObject","window","alert","arr","confirm","find","p","changedPerson","returnedPerson","success","concat","returnedPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3835630e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ person, deleteButton }) => {\r\n  \r\n  return (\r\n    <div>\r\n      {person.name} {person.number}\r\n      <button onClick={() => deleteButton(person.id, person.name)}>\r\n        Delete\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = ({ persons, nameSearch, nameToShow, deleteButton }) => {\r\n\r\n  if (nameSearch === '') {\r\n    return (\r\n      <div>\r\n        {persons.map(person =>\r\n          <Person key={person.name} person={person}\r\n          deleteButton={deleteButton} />\r\n        )}\r\n      </div>\r\n    )\r\n  }else if (nameSearch !== '') {\r\n    return (\r\n      <div>\r\n        {nameToShow.map(person =>\r\n          <Person key={person.name} person={person}\r\n          deleteButton={deleteButton} />\r\n        )}\r\n      </div>\r\n    )\r\n  } else\r\n    return (\r\n      <div>\r\n        {nameToShow.map(person =>\r\n          <Person key={person.name} person={person}\r\n          deleteButton={deleteButton} />\r\n        )}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst AddPersonForm = ({ addPerson, newName,\r\n    handleNameChange, mobileNumber,\r\n    handleMobileNumberChange }) => {\r\n\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <h2>add a new</h2>\r\n            <div>\r\n                name: <input type=\"text\" value={newName}\r\n                    placeholder=\"Enter name here\"\r\n                    onChange={handleNameChange} />\r\n            </div>\r\n            <div>\r\n                number: <input type=\"text\" value={mobileNumber}\r\n                    placeholder=\"Enter phone number here\"\r\n                    onChange={handleMobileNumberChange} /></div>\r\n            <div>\r\n                <button type=\"submit\" style={{backgroundColor: 'green'}}>\r\n                    add\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddPersonForm","import React from 'react'\r\n\r\nconst SearchNameForm = ({ nameSearch, handleNameSearchChange }) => {\r\n    return (\r\n        <div>\r\n            filter shown with<input type=\"text\"\r\n                value={nameSearch}\r\n                placeholder=\"Search by name\"\r\n                onChange={handleNameSearchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchNameForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst del = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, del }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n \r\n  export default Notification","import React from 'react'\r\n\r\nconst SuccessNotification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n    return (\r\n      <div className=\"success\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n \r\n  export default SuccessNotification","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Persons from './components/Persons'\nimport AddPersonForm from './components/AddPersonForm'\nimport SearchNameForm from './components/SearchNameForm'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\nimport SuccessNotification from './components/SuccessNotification'\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [mobileNumber, setMobileNumber] = useState('')\n  const [nameSearch, setNameSearch] = useState('')\n  const [nameToShow, setNameToShow] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      }).catch(error => {\n        setErrorMessage(`The data could not be retrieved from the server!`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }, [])\n  console.log('render', persons.length, 'persons')\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n\n  const handleMobileNumberChange = (evt) => setMobileNumber(evt.target.value)\n\n  const add_update_Person = (event) => {\n    event.preventDefault()\n    console.log('button clicked', event.target)\n    const personObject = {\n      name: newName,\n      number: mobileNumber,\n    }\n\n    if (newName === '' || mobileNumber === '') {\n      return (\n        window.alert('name or number field can not be empty')\n      )\n    } else {\n\n      const personsCopy = [...persons]\n      const arr = personsCopy.filter(element =>\n        element.name.toUpperCase() === newName.toUpperCase())\n\n      if (arr.length === 1) {\n        const choice = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n        if (choice) {\n          const id = arr[0].id\n          const person = personsCopy.find(p => p.id === id)\n          const changedPerson = { ...person, number: mobileNumber }\n          personService\n            .update(id, changedPerson)\n            .then(returnedPerson => {\n              setPersons(personsCopy\n                .map(person => person.id !== id ? person : returnedPerson))\n              setNewName('')\n              setMobileNumber('')\n              console.log(returnedPerson)\n            }).then(success => {\n              setSuccessMessage(`Successfully updated ${newName}'s number`)\n              setTimeout(() => {\n                setSuccessMessage(null)\n              }, 5000)\n            })\n            .catch(error => {\n              setErrorMessage(`Information of ${newName} has already been removed from server`)\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n              setPersons(personsCopy.filter(p => p.id !== id))\n              setNewName('')\n              setMobileNumber('')\n            })\n        } else {\n          setNewName('')\n          setMobileNumber('')\n        }\n      }\n      else {\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n            setPersons(personsCopy.concat(returnedPerson))\n            setNewName('')\n            setMobileNumber('')\n\n          }).then(success => {\n            setSuccessMessage(`Successfully added ${newName}`)\n            setTimeout(() => {\n              setSuccessMessage(null)\n            }, 5000)\n          }).catch(error => {\n            setErrorMessage(error.response.data)\n  //          setErrorMessage(`The person ${newName} could not be added to phonebook`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n            setPersons(personsCopy)\n          })\n      }\n    }\n  }\n\n  const myArray = (personsArray, evt) => {\n    const arr = personsArray.filter(element =>\n      element.name.toUpperCase().includes\n        (evt.target.value.toUpperCase()))\n    return arr\n  }\n\n  const handleNameSearchChange = (event) => {\n    const personsCopy = [...persons]\n    console.log('handleNameSearchChange',\n      event.target.value)\n    setNameSearch(event.target.value)\n    setNameToShow(myArray(personsCopy, event))\n  }\n\n  const deletePerson = (id, name) => {\n\n    const personsCopy = [...persons]\n    console.log('ID and name of person to be deleted', id, name)\n    const choice = window.confirm(`Delete ${name}?`)\n\n    if (choice) {\n      personService.del(id).then(returnedPersons => {\n        setPersons(personsCopy.filter(person =>\n          person.id !== id && person.name !== name))\n        if (nameSearch !== '') {\n          setNameSearch('')\n        }\n      }).then(success => {\n        setSuccessMessage(`${name} is successfully deleted from server`)\n        setTimeout(() => {\n          setSuccessMessage(null)\n        }, 5000)\n      }).catch(error => {\n        setErrorMessage(`${name} was already deleted from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setPersons(personsCopy.filter(p => p.id !== id))\n      })\n    }\n    else {\n      setNewName('')\n      setMobileNumber('')\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessNotification message={successMessage} />\n      <Notification message={errorMessage} />\n      <SearchNameForm nameSearch={nameSearch}\n        handleNameSearchChange={handleNameSearchChange} />\n      <AddPersonForm addPerson={add_update_Person}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        mobileNumber={mobileNumber}\n        handleMobileNumberChange={handleMobileNumberChange} />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        nameSearch={nameSearch}\n        nameToShow={nameToShow}\n        deleteButton={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}